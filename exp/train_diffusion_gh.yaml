# @package _global_

defaults:
  - model: diffusion

train: True
sampling_rate: 48000
length: 262144
channels: 1
log_every_n_steps: 1000

datamodule:
  _target_: main.datamodule_diffusion.WebDatasetDatamodule

  train_dataset:
    _target_: main.dataset_diffusion.create_sfx_dataset
    path: ${DIR_DATA}
    sample_rate: ${sampling_rate}
    chunk_size: ${length}
    shift_augment: True
    cut_prefix: True
    one_chunk_per_track: False
    shardshuffle: True

  val_dataset:
    _target_: main.dataset_diffusion.create_sfx_dataset
    # path: null
    path: data/DIFF-SFX-webdataset/greatest_hits/val_shard_1.tar
    sample_rate: ${sampling_rate}
    chunk_size: ${length}
    shift_augment: False
    cut_prefix: True
    one_chunk_per_track: False
    shardshuffle: False

  shuffle_size: 200
  batch_size: 4
  num_workers: 8
  pin_memory: True
  collate_fn:
    _target_: main.dataset_diffusion.collate_fn
    _partial_: True


callbacks:
  rich_progress_bar:
    _target_: pytorch_lightning.callbacks.RichProgressBar

  model_checkpoint:
    _target_: pytorch_lightning.callbacks.ModelCheckpoint
    monitor: "valid_loss"   # name of the logged metric which determines when model is improving
    save_top_k: 1           # save k best models (determined by above metric)
    save_last: True         # additionaly always save model from last epoch
    mode: "min"             # can be "max" or "min"
    verbose: False
    dirpath: ${logs_dir}/ckpts/${now:%Y-%m-%d-%H-%M-%S}
    filename: '{epoch:02d}-{valid_loss:.3f}'

  model_summary:
    _target_: pytorch_lightning.callbacks.RichModelSummary
    max_depth: 2

  audio_samples_logger:
    _target_: main.module_diffusion.SampleLogger
    num_items: 2
    channels: ${channels}
    sampling_rate: ${sampling_rate}
    length: ${length}
    sampling_steps: [ 100 ]
    embedding_scale: 7.0

loggers:
  wandb:
    _target_: pytorch_lightning.loggers.wandb.WandbLogger
    project: ${oc.env:WANDB_PROJECT}
    entity: ${oc.env:WANDB_ENTITY}
    # offline: False  # set True to store all logs only locally
    job_type: "train"
    group: ""
    save_dir: ${logs_dir}

trainer:
  _target_: pytorch_lightning.Trainer
  devices: -1 # Set `1` to train on GPU, `0` to train on CPU only, and `-1` to train on all GPUs, default `0`
  precision: 32 # Precision used for tensors, default `32`
  accelerator: gpu # `ddp` GPUs train individually and sync gradients, default `None`
  min_epochs: 0
  max_epochs: -1
  gradient_clip_val: 0.5
  accumulate_grad_batches: 2
  enable_model_summary: False
  log_every_n_steps: 10 # Logs metrics every N batches
  check_val_every_n_epoch: null
  val_check_interval: ${log_every_n_steps}
